// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user.sql

package repository

import (
	"context"
	"time"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (
    username,
    passwdhash,
    email,
    phone_number,
    age,
    sex
) VALUES (
    $1, $2, $3, $4, $5, $6
)
`

type CreateUserParams struct {
	Username    string `json:"username"`
	Passwdhash  string `json:"passwdhash"`
	Email       string `json:"email"`
	PhoneNumber string `json:"phone_number"`
	Age         int32  `json:"age"`
	Sex         string `json:"sex"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, createUser,
		arg.Username,
		arg.Passwdhash,
		arg.Email,
		arg.PhoneNumber,
		arg.Age,
		arg.Sex,
	)
	return err
}

const deleteUserTag = `-- name: DeleteUserTag :exec
DELETE FROM users_tags WHERE username = $1 AND tag_id = $2
`

type DeleteUserTagParams struct {
	Username string `json:"username"`
	TagID    int32  `json:"tag_id"`
}

func (q *Queries) DeleteUserTag(ctx context.Context, arg DeleteUserTagParams) error {
	_, err := q.db.Exec(ctx, deleteUserTag, arg.Username, arg.TagID)
	return err
}

const getUserData = `-- name: GetUserData :one
SELECT username, created_at, email, name, surname, phone_number, age, sex, weight, height, BMI FROM users WHERE users.username = $1
`

type GetUserDataRow struct {
	Username    string    `json:"username"`
	CreatedAt   time.Time `json:"created_at"`
	Email       string    `json:"email"`
	Name        string    `json:"name"`
	Surname     string    `json:"surname"`
	PhoneNumber string    `json:"phone_number"`
	Age         int32     `json:"age"`
	Sex         string    `json:"sex"`
	Weight      int32     `json:"weight"`
	Height      int32     `json:"height"`
	Bmi         int32     `json:"bmi"`
}

func (q *Queries) GetUserData(ctx context.Context, username string) (GetUserDataRow, error) {
	row := q.db.QueryRow(ctx, getUserData, username)
	var i GetUserDataRow
	err := row.Scan(
		&i.Username,
		&i.CreatedAt,
		&i.Email,
		&i.Name,
		&i.Surname,
		&i.PhoneNumber,
		&i.Age,
		&i.Sex,
		&i.Weight,
		&i.Height,
		&i.Bmi,
	)
	return i, err
}

const getUserTags = `-- name: GetUserTags :many
SELECT tag_id FROM users_tags WHERE username = $1
`

func (q *Queries) GetUserTags(ctx context.Context, username string) ([]int32, error) {
	rows, err := q.db.Query(ctx, getUserTags, username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var tag_id int32
		if err := rows.Scan(&tag_id); err != nil {
			return nil, err
		}
		items = append(items, tag_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertUserTag = `-- name: InsertUserTag :exec
INSERT INTO users_tags (username, tag_id) VALUES ($1, $2)
ON CONFLICT DO NOTHING
`

type InsertUserTagParams struct {
	Username string `json:"username"`
	TagID    int32  `json:"tag_id"`
}

func (q *Queries) InsertUserTag(ctx context.Context, arg InsertUserTagParams) error {
	_, err := q.db.Exec(ctx, insertUserTag, arg.Username, arg.TagID)
	return err
}

const loginUserWithUsername = `-- name: LoginUserWithUsername :one
SELECT username, passwdhash FROM users WHERE username = $1
`

type LoginUserWithUsernameRow struct {
	Username   string `json:"username"`
	Passwdhash string `json:"passwdhash"`
}

func (q *Queries) LoginUserWithUsername(ctx context.Context, username string) (LoginUserWithUsernameRow, error) {
	row := q.db.QueryRow(ctx, loginUserWithUsername, username)
	var i LoginUserWithUsernameRow
	err := row.Scan(&i.Username, &i.Passwdhash)
	return i, err
}

const updateUserSettings = `-- name: UpdateUserSettings :exec
UPDATE users
SET
    email        = CASE WHEN $1        = ''  THEN email        ELSE $1        END,
    name         = CASE WHEN $2         = ''  THEN name         ELSE $2         END,
    surname      = CASE WHEN $3      = ''  THEN surname      ELSE $3      END,
    phone_number = CASE WHEN $4 = ''  THEN phone_number ELSE $4 END,
    age          = CASE WHEN $5          = -1  THEN age          ELSE $5          END,
    sex          = CASE WHEN $6          = ''  THEN sex          ELSE $6          END,
    weight       = CASE WHEN $7       = -1  THEN weight       ELSE $7       END,
    height       = CASE WHEN $8       = -1  THEN height       ELSE $8       END,
    bmi          = CASE WHEN $9          = -1  THEN bmi          ELSE $9          END
WHERE username = $10
`

type UpdateUserSettingsParams struct {
	Email       interface{} `json:"email"`
	Name        interface{} `json:"name"`
	Surname     interface{} `json:"surname"`
	PhoneNumber interface{} `json:"phone_number"`
	Age         interface{} `json:"age"`
	Sex         interface{} `json:"sex"`
	Weight      interface{} `json:"weight"`
	Height      interface{} `json:"height"`
	Bmi         interface{} `json:"bmi"`
	Username    string      `json:"username"`
}

func (q *Queries) UpdateUserSettings(ctx context.Context, arg UpdateUserSettingsParams) error {
	_, err := q.db.Exec(ctx, updateUserSettings,
		arg.Email,
		arg.Name,
		arg.Surname,
		arg.PhoneNumber,
		arg.Age,
		arg.Sex,
		arg.Weight,
		arg.Height,
		arg.Bmi,
		arg.Username,
	)
	return err
}
