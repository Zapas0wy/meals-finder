// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package repository

import (
	"context"
	"time"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (
    username,
    passwdhash,
    email,
    phone_number,
    age,
    sex
) VALUES (
    $1, $2, $3, $4, $5, $6
)
`

type CreateUserParams struct {
	Username    string `json:"username"`
	Passwdhash  string `json:"passwdhash"`
	Email       string `json:"email"`
	PhoneNumber string `json:"phone_number"`
	Age         int32  `json:"age"`
	Sex         string `json:"sex"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, createUser,
		arg.Username,
		arg.Passwdhash,
		arg.Email,
		arg.PhoneNumber,
		arg.Age,
		arg.Sex,
	)
	return err
}

const getUserData = `-- name: GetUserData :one
SELECT username, created_at, email, name, surname, phone_number, age, sex, weight, height, BMI FROM users WHERE users.username = $1
`

type GetUserDataRow struct {
	Username    string    `json:"username"`
	CreatedAt   time.Time `json:"created_at"`
	Email       string    `json:"email"`
	Name        string    `json:"name"`
	Surname     string    `json:"surname"`
	PhoneNumber string    `json:"phone_number"`
	Age         int32     `json:"age"`
	Sex         string    `json:"sex"`
	Weight      int32     `json:"weight"`
	Height      int32     `json:"height"`
	Bmi         int32     `json:"bmi"`
}

func (q *Queries) GetUserData(ctx context.Context, username string) (GetUserDataRow, error) {
	row := q.db.QueryRow(ctx, getUserData, username)
	var i GetUserDataRow
	err := row.Scan(
		&i.Username,
		&i.CreatedAt,
		&i.Email,
		&i.Name,
		&i.Surname,
		&i.PhoneNumber,
		&i.Age,
		&i.Sex,
		&i.Weight,
		&i.Height,
		&i.Bmi,
	)
	return i, err
}

const loginUserWithUsername = `-- name: LoginUserWithUsername :one
SELECT username, passwdhash FROM users WHERE username = $1
`

type LoginUserWithUsernameRow struct {
	Username   string `json:"username"`
	Passwdhash string `json:"passwdhash"`
}

func (q *Queries) LoginUserWithUsername(ctx context.Context, username string) (LoginUserWithUsernameRow, error) {
	row := q.db.QueryRow(ctx, loginUserWithUsername, username)
	var i LoginUserWithUsernameRow
	err := row.Scan(&i.Username, &i.Passwdhash)
	return i, err
}
